apply plugin: 'java'
apply plugin: 'groovy'
//apply from : '../upload_plugin.gradle'
sourceSets {
    main {
        java {
            srcDir '../plugin_privacy/src/main/java'
        }

        groovy {
            srcDir '../plugin_privacy/src/main/groovy'
        }

        resources {
            srcDir '../plugin_privacy/src/main/resources'
        }
    }
}


dependencies {
    implementation gradleApi()
    implementation localGroovy()
    implementation 'org.ow2.asm:asm:9.2'
    implementation 'org.ow2.asm:asm-commons:9.2'
    implementation 'com.android.tools.build:gradle:3.5.4'
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}


apply plugin: "com.gradle.plugin-publish"
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.7"
    }
}

group = 'com.sason-max.gradle'
version = '1.0.6'

pluginBundle {
    website = 'https://github.com/season-max/asm_hook'
    vcsUrl = 'https://github.com/season-max/asm_hook.git'
    description = 'privacy check(隐私合规检测)'  //插件描述
    tags = ['隐私合规', 'privacy check', 'asm', 'Android']  //插件的tag。可以通过这个在插件门户上搜索

    plugins {
        greetingsPlugin {
            id = 'privacy.track'   //插件的id，到时候apply的插件id
            displayName = 'privacy Plugin'
        }
    }
}


//apply plugin: 'maven-publish'
//
//ext {
//    plugin_groupId = 'com.sason-max.gradle'
//    plugin_artifactId = 'plugins'
//    plugin_version = '1.0.5'
//    local = true
//    release = true
//}
//
//def javadocJar = task("javadocJar", type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}
//def sourcesJar = task("sourcesJar", type: Jar) {
//    classifier = 'sources'
//    from sourceSets.main.groovy
//}
//// 读取github.properties文件里的授权信息，不要把这个文件push到GitHub
//def githubProperties = new Properties()
//githubProperties.load(new FileInputStream(rootProject.file("github.properties")))
//
//// 因为用于定义发布类型的components是在afterEvaluate阶段被创建的，所以必须把发布配置写在project.afterEvaluate {}代码块中
//afterEvaluate {
//    // 定义发布
//    publishing {
//        // 定义要发布到的远程Maven仓库，可以定义多个，gradle会自动生成发送到指定Maven仓库的task
//        repositories {
//            maven {
//                if (local) {
//                    url = uri('../repo')
//                } else {
//                    name = "GitHubPackages"
//                    // 指定要发布到的GitHub Repository仓库url
//                    url = uri('https://maven.pkg.github.com/season-max/asm_hook')
//                    credentials {
//                        // 用户名和token
//                        println "--->username:${githubProperties.getProperty("username")},-->token_key:${githubProperties.getProperty("token_key")}"
//                        username = githubProperties.getProperty("username")
//                        password = githubProperties.getProperty("token_key")
//                    }
//                }
//
//            }
//        }
//        // 定义要发布的包，可以定义多个，gradle会自动生成把不同的包发送到指定的Maven仓库的task
//        publications {
//            gpr(MavenPublication) {
//                from(components.java)
//                groupId = plugin_groupId
//                artifactId = plugin_artifactId
//                version = plugin_version
//
//                artifact javadocJar
//                artifact sourcesJar
//            }
//        }
//    }
//}